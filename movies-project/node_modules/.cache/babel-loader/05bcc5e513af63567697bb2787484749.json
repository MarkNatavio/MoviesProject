{"ast":null,"code":"import axios from 'axios'; // Constants for the Movie Database (TMDB) API\n\nconst apiKey = 'd681d6302c1d36abb2ea52e15f7ba6a8'; // API key (d681d6302c1d36abb2ea52e15f7ba6a8)\n\nconst url = 'https://api.themoviedb.org/3'; // basic API URL \n\nconst genreUrl = `${url}/genre/movie/list`; // URL to find movies by genre\n\nconst moviesUrl = `${url}/discover/movie`; // URL to find similar movies\n\nconst movieUrl = `${url}/movie`; // URL to find info on movie\n\nconst search = `${url}/search/movie?api_key=${apiKey}`; // URL to find movies based on key word\n// Get array of all genres\n\nexport const fetchGenre = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(genreUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const modifiedData = data['genres'].map(g => ({\n      id: g['id'],\n      name: g['name']\n    }));\n    return modifiedData;\n  } catch (error) {}\n}; // Get array of all movies of a genre\n\nexport const fetchMovieByGenre = async genre_id => {\n  try {\n    const {\n      data\n    } = await axios.get(moviesUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        with_genres: genre_id\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n}; // Get data on movie selected\n\nexport const fetchMovieDetail = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    return data;\n  } catch (error) {}\n}; // Get videos of the movie (the trailer)\n\nexport const fetchMovieVideos = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/videos`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    return data['results'][0];\n  } catch (error) {}\n}; // Get data on movie cast\n\nexport const fetchCasts = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/credits`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['cast'].map(c => ({\n      id: c['cast_id'],\n      character: c['character'],\n      name: c['name'],\n      img: 'https://image.tmdb.org/t/p/w200' + c['profile_path']\n    }));\n    return modifiedData;\n  } catch (error) {}\n}; // Get array of similar movies\n\nexport const fetchSimilarMovie = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/similar`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n}; // Get array of movies based on key word search\n\nexport const movieSearch = async title => {\n  try {\n    const {\n      data\n    } = await axios.get(`${search}&query=${title}`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n}; // =====================================================================================\n// Constants for GoWatchIt API\n\nconst apiKey2 = ''; // API key\n\nconst url2 = ''; // basic API URL \n\nconst movie = ``; // URL to find where movie is available","map":{"version":3,"sources":["/Users/marknatavio/Downloads/react-moviedb-master/src/service/index.js"],"names":["axios","apiKey","url","genreUrl","moviesUrl","movieUrl","search","fetchGenre","data","get","params","api_key","language","page","modifiedData","map","g","id","name","error","fetchMovieByGenre","genre_id","with_genres","posterUrl","m","backPoster","popularity","title","poster","overview","rating","fetchMovieDetail","fetchMovieVideos","fetchCasts","c","character","img","fetchSimilarMovie","movieSearch","apiKey2","url2","movie"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n// Constants for the Movie Database (TMDB) API\nconst apiKey = 'd681d6302c1d36abb2ea52e15f7ba6a8'; // API key (d681d6302c1d36abb2ea52e15f7ba6a8)\nconst url = 'https://api.themoviedb.org/3'; // basic API URL \nconst genreUrl = `${url}/genre/movie/list`; // URL to find movies by genre\nconst moviesUrl = `${url}/discover/movie`; // URL to find similar movies\nconst movieUrl = `${url}/movie`; // URL to find info on movie\nconst search = `${url}/search/movie?api_key=${apiKey}` // URL to find movies based on key word\n\n// Get array of all genres\nexport const fetchGenre = async () => {\n    try {\n        const { data } = await axios.get(genreUrl, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US',\n                page: 1\n            }\n        })\n        const modifiedData = data['genres'].map((g) => ({\n            id: g['id'],\n            name: g['name']\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\n// Get array of all movies of a genre\nexport const fetchMovieByGenre = async (genre_id) => {\n    try {\n        const { data } = await axios.get(moviesUrl, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US',\n                with_genres: genre_id\n            }\n        })\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\n        const modifiedData = data['results'].map((m) => ({\n            id: m['id'],\n            backPoster: posterUrl + m['backdrop_path'],\n            popularity: m['popularith'],\n            title: m['title'],\n            poster: posterUrl + m['poster_path'],\n            overview: m['overview'],\n            rating: m['vote_average'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\n// Get data on movie selected\nexport const fetchMovieDetail = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}`, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US'\n            }\n        });\n\n        return data;\n    } catch (error) { }\n}\n\n// Get videos of the movie (the trailer)\nexport const fetchMovieVideos = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}/videos`, {\n            params: {\n                api_key: apiKey,\n            }\n        });\n        return data['results'][0];\n    } catch (error) { }\n}\n\n// Get data on movie cast\nexport const fetchCasts = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}/credits`, {\n            params: {\n                api_key: apiKey,\n            }\n        });\n        const modifiedData = data['cast'].map((c) => ({\n            id: c['cast_id'],\n            character: c['character'],\n            name: c['name'],\n            img: 'https://image.tmdb.org/t/p/w200' + c['profile_path'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\n// Get array of similar movies\nexport const fetchSimilarMovie = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}/similar`, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US'\n            }\n        });\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\n        const modifiedData = data['results'].map((m) => ({\n            id: m['id'],\n            backPoster: posterUrl + m['backdrop_path'],\n            popularity: m['popularith'],\n            title: m['title'],\n            poster: posterUrl + m['poster_path'],\n            overview: m['overview'],\n            rating: m['vote_average'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\n// Get array of movies based on key word search\nexport const movieSearch = async (title) => {\n    try {\n        const { data } = await axios.get(`${search}&query=${title}`, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US'\n            }\n        })\n\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\n        const modifiedData = data['results'].map((m) => ({\n            id: m['id'],\n            backPoster: posterUrl + m['backdrop_path'],\n            popularity: m['popularith'],\n            title: m['title'],\n            poster: posterUrl + m['poster_path'],\n            overview: m['overview'],\n            rating: m['vote_average'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\n// =====================================================================================\n// Constants for GoWatchIt API\nconst apiKey2 = ''; // API key\nconst url2 = ''; // basic API URL \nconst movie = ``; // URL to find where movie is available\n\n"]},"metadata":{},"sourceType":"module"}