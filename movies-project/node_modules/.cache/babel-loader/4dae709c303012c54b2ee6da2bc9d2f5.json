{"ast":null,"code":"import axios from 'axios'; // Constants\n\nconst apiKey = 'd681d6302c1d36abb2ea52e15f7ba6a8'; // API key (d681d6302c1d36abb2ea52e15f7ba6a8)\n\nconst url = 'https://api.themoviedb.org/3'; // basic API URL \n\nconst genreUrl = `${url}/genre/movie/list`; // URL to find movies by genre\n\nconst moviesUrl = `${url}/discover/movie`; // URL to find similar movies\n\nconst movieUrl = `${url}/movie`; // URL to find info on movie\n\nconst search = `${url}/search/movie?api_key=${apiKey}`; // URL to find movies based on key word\n// Get list of all  genre\n\nexport const fetchGenre = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(genreUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const modifiedData = data['genres'].map(g => ({\n      id: g['id'],\n      name: g['name']\n    }));\n    console.log(modifiedData);\n    return modifiedData;\n  } catch (error) {}\n}; // Get list of all movies of a genre\n\nexport const fetchMovieByGenre = async genre_id => {\n  try {\n    const {\n      data\n    } = await axios.get(moviesUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        with_genres: genre_id\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchMovieDetail = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    return data;\n  } catch (error) {}\n};\nexport const fetchMovieVideos = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/videos`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    return data['results'][0];\n  } catch (error) {}\n};\nexport const fetchCasts = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/credits`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['cast'].map(c => ({\n      id: c['cast_id'],\n      character: c['character'],\n      name: c['name'],\n      img: 'https://image.tmdb.org/t/p/w200' + c['profile_path']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchSimilarMovie = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/similar`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const movieSearch = async title => {\n  try {\n    const {\n      data\n    } = await axios.get(`${search}&query=${title}`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};","map":{"version":3,"sources":["/Users/marknatavio/Downloads/react-moviedb-master/src/service/index.js"],"names":["axios","apiKey","url","genreUrl","moviesUrl","movieUrl","search","fetchGenre","data","get","params","api_key","language","page","modifiedData","map","g","id","name","console","log","error","fetchMovieByGenre","genre_id","with_genres","posterUrl","m","backPoster","popularity","title","poster","overview","rating","fetchMovieDetail","fetchMovieVideos","fetchCasts","c","character","img","fetchSimilarMovie","movieSearch"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n// Constants\nconst apiKey = 'd681d6302c1d36abb2ea52e15f7ba6a8'; // API key (d681d6302c1d36abb2ea52e15f7ba6a8)\nconst url = 'https://api.themoviedb.org/3'; // basic API URL \nconst genreUrl = `${url}/genre/movie/list`; // URL to find movies by genre\nconst moviesUrl = `${url}/discover/movie`; // URL to find similar movies\nconst movieUrl = `${url}/movie`; // URL to find info on movie\nconst search = `${url}/search/movie?api_key=${apiKey}` // URL to find movies based on key word\n\n// Get list of all  genre\nexport const fetchGenre = async () => {\n    try {\n        const { data } = await axios.get(genreUrl, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US',\n                page: 1\n            }\n        })\n        const modifiedData = data['genres'].map((g) => ({\n            id: g['id'],\n            name: g['name']\n        }))\n        console.log(modifiedData)\n        return modifiedData;\n    } catch (error) { }\n}\n\n// Get list of all movies of a genre\nexport const fetchMovieByGenre = async (genre_id) => {\n    try {\n        const { data } = await axios.get(moviesUrl, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US',\n                with_genres: genre_id\n            }\n        })\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\n        const modifiedData = data['results'].map((m) => ({\n            id: m['id'],\n            backPoster: posterUrl + m['backdrop_path'],\n            popularity: m['popularith'],\n            title: m['title'],\n            poster: posterUrl + m['poster_path'],\n            overview: m['overview'],\n            rating: m['vote_average'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\nexport const fetchMovieDetail = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}`, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US'\n            }\n        });\n        return data;\n    } catch (error) { }\n}\n\nexport const fetchMovieVideos = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}/videos`, {\n            params: {\n                api_key: apiKey,\n            }\n        });\n        return data['results'][0];\n    } catch (error) { }\n}\n\nexport const fetchCasts = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}/credits`, {\n            params: {\n                api_key: apiKey,\n            }\n        });\n        const modifiedData = data['cast'].map((c) => ({\n            id: c['cast_id'],\n            character: c['character'],\n            name: c['name'],\n            img: 'https://image.tmdb.org/t/p/w200' + c['profile_path'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\nexport const fetchSimilarMovie = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}/similar`, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US'\n            }\n        });\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\n        const modifiedData = data['results'].map((m) => ({\n            id: m['id'],\n            backPoster: posterUrl + m['backdrop_path'],\n            popularity: m['popularith'],\n            title: m['title'],\n            poster: posterUrl + m['poster_path'],\n            overview: m['overview'],\n            rating: m['vote_average'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\nexport const movieSearch = async (title) => {\n    try {\n        const { data } = await axios.get(`${search}&query=${title}`, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US'\n            }\n        })\n\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\n        const modifiedData = data['results'].map((m) => ({\n            id: m['id'],\n            backPoster: posterUrl + m['backdrop_path'],\n            popularity: m['popularith'],\n            title: m['title'],\n            poster: posterUrl + m['poster_path'],\n            overview: m['overview'],\n            rating: m['vote_average'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n"]},"metadata":{},"sourceType":"module"}