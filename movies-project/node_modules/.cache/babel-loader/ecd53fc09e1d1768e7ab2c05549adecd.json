{"ast":null,"code":"import axios from 'axios';\nconst apiKey = 'a4999a28333d1147dbac0d104526337a';\nconst url = 'https://api.themoviedb.org/3';\nconst nowPlayingUrl = `${url}/movie/now_playing`;\nconst topratedUrl = `${url}/movie/top_rated`;\nconst movieUrl = `${url}/movie`;\nconst genreUrl = `${url}/genre/movie/list`;\nconst moviesUrl = `${url}/discover/movie`;\nconst personUrl = `${url}/trending/person/week`;\nconst search = `${url}search/movie?api_key=${apiKey}`;\nexport const fetchMovies = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(nowPlayingUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchGenre = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(genreUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const modifiedData = data['genres'].map(g => ({\n      id: g['id'],\n      name: g['name']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchMovieByGenre = async genre_id => {\n  try {\n    const {\n      data\n    } = await axios.get(moviesUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        with_genres: genre_id\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchPersons = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(personUrl, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['results'].map(p => ({\n      id: p['id'],\n      popularity: p['popularity'],\n      name: p['name'],\n      profileImg: 'https://image.tmdb.org/t/p/w200' + p['profile_path'],\n      known: p['known_for_department']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchTopratedMovie = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(topratedUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchMovieDetail = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    return data;\n  } catch (error) {}\n};\nexport const fetchMovieVideos = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/videos`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    return data['results'][0];\n  } catch (error) {}\n};\nexport const fetchCasts = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/credits`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['cast'].map(c => ({\n      id: c['cast_id'],\n      character: c['character'],\n      name: c['name'],\n      img: 'https://image.tmdb.org/t/p/w200' + c['profile_path']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchSimilarMovie = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/similar`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const movieSearch = async title => {\n  try {\n    const {\n      data\n    } = await axios.get(`${search}&query=${title}`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        keyword: title\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};","map":{"version":3,"sources":["/Users/marknatavio/Downloads/react-moviedb-master/src/service/index.js"],"names":["axios","apiKey","url","nowPlayingUrl","topratedUrl","movieUrl","genreUrl","moviesUrl","personUrl","search","fetchMovies","data","get","params","api_key","language","page","posterUrl","modifiedData","map","m","id","backPoster","popularity","title","poster","overview","rating","error","fetchGenre","g","name","fetchMovieByGenre","genre_id","with_genres","fetchPersons","p","profileImg","known","fetchTopratedMovie","fetchMovieDetail","fetchMovieVideos","fetchCasts","c","character","img","fetchSimilarMovie","movieSearch","keyword"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst apiKey = 'a4999a28333d1147dbac0d104526337a';\nconst url = 'https://api.themoviedb.org/3';\nconst nowPlayingUrl = `${url}/movie/now_playing`;\nconst topratedUrl = `${url}/movie/top_rated`;\nconst movieUrl = `${url}/movie`;\nconst genreUrl = `${url}/genre/movie/list`;\nconst moviesUrl = `${url}/discover/movie`;\nconst personUrl = `${url}/trending/person/week`;\nconst search = `${url}search/movie?api_key=${apiKey}`\n\nexport const fetchMovies = async () => {\n    try {\n        const { data } = await axios.get(nowPlayingUrl, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US',\n                page: 1\n            }\n        })\n\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\n        const modifiedData = data['results'].map((m) => ({\n            id: m['id'],\n            backPoster: posterUrl + m['backdrop_path'],\n            popularity: m['popularith'],\n            title: m['title'],\n            poster: posterUrl + m['poster_path'],\n            overview: m['overview'],\n            rating: m['vote_average'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\nexport const fetchGenre = async () => {\n    try {\n        const { data } = await axios.get(genreUrl, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US',\n                page: 1\n            }\n        })\n        const modifiedData = data['genres'].map((g) => ({\n            id: g['id'],\n            name: g['name']\n        }))\n        return modifiedData;\n    } catch (error) { }\n}\n\nexport const fetchMovieByGenre = async (genre_id) => {\n    try {\n        const { data } = await axios.get(moviesUrl, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US',\n                with_genres: genre_id\n            }\n        })\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\n        const modifiedData = data['results'].map((m) => ({\n            id: m['id'],\n            backPoster: posterUrl + m['backdrop_path'],\n            popularity: m['popularith'],\n            title: m['title'],\n            poster: posterUrl + m['poster_path'],\n            overview: m['overview'],\n            rating: m['vote_average'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\nexport const fetchPersons = async () => {\n    try {\n        const { data } = await axios.get(personUrl, {\n            params: {\n                api_key: apiKey\n            }\n        })\n        const modifiedData = data['results'].map((p) => ({\n            id: p['id'],\n            popularity: p['popularity'],\n            name: p['name'],\n            profileImg: 'https://image.tmdb.org/t/p/w200' + p['profile_path'],\n            known: p['known_for_department']\n        }))\n        return modifiedData;\n    } catch (error) { }\n}\n\nexport const fetchTopratedMovie = async () => {\n    try {\n        const { data } = await axios.get(topratedUrl, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US'\n            }\n        })\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\n        const modifiedData = data['results'].map((m) => ({\n            id: m['id'],\n            backPoster: posterUrl + m['backdrop_path'],\n            popularity: m['popularith'],\n            title: m['title'],\n            poster: posterUrl + m['poster_path'],\n            overview: m['overview'],\n            rating: m['vote_average'],\n        }))\n\n        return modifiedData;\n    } catch (error) {\n\n    }\n}\n\nexport const fetchMovieDetail = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}`, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US'\n            }\n        });\n        return data;\n    } catch (error) { }\n}\n\nexport const fetchMovieVideos = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}/videos`, {\n            params: {\n                api_key: apiKey,\n            }\n        });\n        return data['results'][0];\n    } catch (error) { }\n}\n\nexport const fetchCasts = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}/credits`, {\n            params: {\n                api_key: apiKey,\n            }\n        });\n        const modifiedData = data['cast'].map((c) => ({\n            id: c['cast_id'],\n            character: c['character'],\n            name: c['name'],\n            img: 'https://image.tmdb.org/t/p/w200' + c['profile_path'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\nexport const fetchSimilarMovie = async (id) => {\n    try {\n        const { data } = await axios.get(`${movieUrl}/${id}/similar`, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US'\n            }\n        });\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\n        const modifiedData = data['results'].map((m) => ({\n            id: m['id'],\n            backPoster: posterUrl + m['backdrop_path'],\n            popularity: m['popularith'],\n            title: m['title'],\n            poster: posterUrl + m['poster_path'],\n            overview: m['overview'],\n            rating: m['vote_average'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n\nexport const movieSearch = async (title) => {\n    try {\n        const { data } = await axios.get(`${search}&query=${title}`, {\n            params: {\n                api_key: apiKey,\n                language: 'en_US',\n                keyword: title\n            }\n        })\n\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\n        const modifiedData = data['results'].map((m) => ({\n            id: m['id'],\n            backPoster: posterUrl + m['backdrop_path'],\n            popularity: m['popularith'],\n            title: m['title'],\n            poster: posterUrl + m['poster_path'],\n            overview: m['overview'],\n            rating: m['vote_average'],\n        }))\n\n        return modifiedData;\n    } catch (error) { }\n}\n"]},"metadata":{},"sourceType":"module"}